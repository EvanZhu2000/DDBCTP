
share streamTable(1000:0, `timestamp`symbol`price`volume, [TIMESTAMP, SYMBOL, DOUBLE, INT]) as level1Stream
share streamTable(10000:0, `timestamp`symbol`price, [TIMESTAMP,SYMBOL,DOUBLE]) as agg10s
share streamTable(10000:0, `timestamp`symbol`price, [TIMESTAMP,SYMBOL,DOUBLE]) as agg1min
share streamTable(10000:0, `timestamp`symbol`price, [TIMESTAMP,SYMBOL,DOUBLE]) as factorresult 

go

def factor_calc(x, y, z){
      ts = x
      sym = y[0]
      last10s = z
      last1min = select price from agg1min where symbol==sym order by timestamp desc
      if (isNull(last1min.price[0])){
        result = double(null)
      } else {
        result = last10s / last1min.price[0] - 1
      }
      return result
    }
factor1 = <factor_calc(timestamp,symbol,price)>
    
go
    
engine10s = createTimeSeriesEngine(name="engine10s", windowSize=10000, step=10000, metrics=<[last(price)]>,\
    dummyTable=level1Stream, outputTable=agg10s, timeColumn="timestamp", useSystemTime=false,\
    keyColumn="symbol", useWindowStartTime=false)
    
engine1min = createTimeSeriesEngine(name="engine1min", windowSize=60000, step=60000,\
    metrics=<[last(price)]>,dummyTable=level1Stream, outputTable=agg1min,\
    timeColumn="timestamp",useSystemTime=false,keyColumn="symbol",useWindowStartTime=false)
    
factor_calc = createReactiveStateEngine(name="factor", metrics=[<symbol>,factor1], dummyTable=agg10s,\
    outputTable=factorresult,keyColumn="timestamp")

go

subscribeTable(tableName=`level1Stream, actionName="engine10s", handler=tableInsert{engine10s}, msgAsTable=true, offset=-1)
subscribeTable(tableName=`level1Stream, actionName="engine1min", handler=tableInsert{engine1min}, msgAsTable=true, offset=-1)
subscribeTable(tableName=`agg10s, actionName="factor", handler=tableInsert{factor_calc}, msgAsTable=true, offset=-1)
